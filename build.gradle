buildscript {
    repositories {
    }
    dependencies {
    }
}



plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

repositories {
    mavenLocal()
    mavenCentral()

}

apply plugin: 'net.minecraftforge.gradle'
//apply plugin: 'com.github.johnrengelman.shadow'

group = "com.github.williamli0707"
version = "1.19-1.0.1.11"
archivesBaseName = "mongomod"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

configurations {
    include { transitive = false }
    library
    shade
    implementation.extendsFrom include
    implementation.extendsFrom library
    implementation.extendsFrom shade
}

dependencies {

    minecraft 'net.minecraftforge:forge:1.19-41.0.45'

    include 'org.mongodb:mongodb-driver-sync:4.6.0'
    shade 'org.mongodb:mongodb-driver-sync:4.6.0'
}

minecraft {
    mappings channel: 'official', version: '1.19'

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', ''

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', ''

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', ''

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'mongomod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

jar {
    manifest {
        attributes([
                "Specification-Title"     : "mongomod",
                "Specification-Vendor"    : "williamli0707",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "williamli0707",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

shadowJar {
    archiveClassifier = ''
    configurations = [project.configurations.shade]
    relocate 'org.mongodb.mongodb-driver-sync', 'shaded.mongodb-driver-sync'
    finalizedBy 'reobfShadowJar'
}

assemble.dependsOn shadowJar

reobf {
    shadowJar {}
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
